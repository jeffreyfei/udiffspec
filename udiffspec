#!/usr/bin/env bash
# This is intended as an improvement on the work done by diffspec, to make it a bleeding
# edge technology just like ucpp (lol)

# Check out: https://github.com/ian952/diffspec/blob/master/diffspec

# Usage: udiffspec -o <program> -O <sample> [options]
# You can use the -i option to specify a custom test file
# If no testname is specified, all tests under specs/ will be ran.
# Use -v to turn on verbose mode. Output will be printed for passing tests as well.

# Creds to Ian Hu, Denton Liu, and CS 247 TA for providing the code for diffspec!!!

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

verbose=0
INPUTMODE="std"

print_usage() {
    echo ""
    echo "----------------Usage---------------"
    echo ""
    echo "diffspec -o <program> -O <sample> [options]"
    echo ""
    echo "-v Verbose mode"
    echo "-i <test-file/dir>"
    echo "-a <custom-args>"
    echo "-m <std|file|arg>"
    echo ""
    echo "------------------------------------"
    echo ""
}

while getopts i:a:o:O:m:hv opt; do
    case $opt in
        a)
            ARGS=${OPTARG}
            ;;
        v)
            verbose=1
            ;;
        o)
            prog=${OPTARG}
            ;;
        O)
            prov=${OPTARG}
            ;;
        i)
            INPUT=${OPTARG}
            ;;
        h)
            print_usage
            ;;
        m)
            INPUTMODE=${OPTARG}
            if [ "$INPUTMODE" != "file" ] && [ "$INPUTMODE" != "std" ] && [ "$INPUTMODE" != "arg" ]; then
                print_usage
                exit 1
            fi
            echo "Test mode: $INPUTMODE"
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            ;;
    esac
done

passed=1

if [ ! -x "$prog" ]; then
    echo "Executable $prog does not exist or is not executable" >&2
    print_usage
    exit 1
fi

if [ ! -x "$prov" ]; then
    echo "Executable $prov does not exist or is not executable" >&2
    print_usage
    exit 1
fi

if [ -z "$INPUT" ]; then
    INPUT="specs"
fi

if [ -d "$INPUT" ]; then
    echo "Running all tests in directory: $INPUT" >&2
    # TODO: handle spaces properly

    subdircount=`find $INPUT/* -maxdepth 1 -type d | wc -l`
    if [ $subdircount -eq 0 ]; then
        tests="$(ls $INPUT/*.in)"
    else
        tests="$(ls $INPUT/*.in specs/**/*.in)"
    fi
else
    echo "Running single test" >&2
    tests="$INPUT"
fi

print_output() {
    echo "Input:"
    cat "$infile"
    echo -e "\n${GREEN}Expected output:"
    cat "$provfile"
    echo -e "\n${RED}Actual output:"
    cat "$outfile"
}

for test in $tests; do
    infile="$test"
    outfile=$(mktemp)
    provfile=$(mktemp)
    if [ ! -r "$infile" ]; then
        echo "File $infile does not exist or is not readable" >&2
        exit 1
    fi
    if [[ "$INPUTMODE" = "file" ]]; then
        ./$prog $infile $ARGS &> $outfile
        ./$prov $infile $ARGS &> $provfile
    elif [ "$INPUTMODE" = "arg" ]; then
        ./$prog $ARGS $(cat $test) &> $outfile
        ./$prov $ARGS $(cat $test) &> $provfile
    else
        ./$prog $ARGS < "$infile" &> "$outfile"
        ./$prov $ARGS < "$infile" &> "$provfile"
    fi
    diffRes=$(diff -u "$provfile" "$outfile")
    if [ "$diffRes" != "" ]; then
        passed=0
        echo -e "${RED}Fail: $test\n"
        print_output
        echo -e "\n\nDiff:"
        echo -e "${diffRes}"
        echo -e "${NC}"
    else
        echo -e "${GREEN}Pass: $test${NC}"
        if [[ $verbose -eq 1 ]]; then
            print_output
        fi
    fi

    rm "$outfile"
    rm "$provfile"
done

if [ "$passed" = 1 ]; then
    echo -e "\nâœ… ${GREEN} All tests passed${NC} ðŸ’¯"
fi
